buildscript {
    repositories {
        // These repositories are only for Gradle plugins, put any other repositories in the repository block further below
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://maven.parchmentmc.org' }
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath "org.parchmentmc:librarian:${librarian_version}"
        classpath "org.spongepowered:mixingradle:${mixingradle_version}"
    }
}
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
plugins {
    id 'eclipse'
    id 'maven-publish'
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
apply plugin: 'org.spongepowered.mixin'
version = '1.0'
group = 'com.cyvack.create_crystal_clear' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'create_crystal_clear'

// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    mappings channel: 'parchment', version: "${parchment_version}-${minecraft_version}"

    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', 'create_crystal_clear'

            mods {
                create_crystal_clear {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', 'create_crystal_clear'

            mods {
                create_crystal_clear {
                    source sourceSets.main
                }
            }
        }


        gameTestServer {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', 'create_crystal_clear'

            mods {
                create_crystal_clear {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            args '--mod', 'create_crystal_clear', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/'), '--existing-mod', 'create'

            mods {
                create_crystal_clear {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
        maven {
            //CURSE
            name "Cursemaven"
            url "https://cursemaven.com"
            content {
                includeGroup "curse.maven"
            }
        }

        maven {
            //CREATE
            name = 'tterrag maven'
            url = 'https://maven.tterrag.com/'
        }

        maven {
        // JEI
        name 'Progwm16 maven'
        url 'https://dvs1.progwml6.com/files/maven'
        }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"


    // Rolled back to 0.5.c and 0.6.4
    //CREATE, FLYWHEEL & REGISTRATE
    compileOnly fg.deobf("com.tterrag.registrate:Registrate:${registrate_version}")
    implementation fg.deobf("com.simibubi.create:Create:mc${create_version}") // Create
    implementation fg.deobf("com.jozufozu.flywheel:Flywheel-Forge:${flywheel_version}") // Flywheel

    // Rolled back to 0.5.c version
    //ALLOYED
    implementation fg.deobf("curse.maven:alloyed-564792:3871942")

    //JEI
    compileOnly fg.deobf("mezz.jei:jei-${minecraft_version}:${jei_version}:api")
    runtimeOnly fg.deobf("mezz.jei:jei-${minecraft_version}:${jei_version}")

    //MIXINS
    annotationProcessor "org.spongepowered:mixin:0.8.5:processor"
    testAnnotationProcessor "org.spongepowered:mixin:0.8.5:processor"

    if (System.getProperty('idea.sync.active') != 'true') {
        annotationProcessor "org.spongepowered:mixin:0.7-SNAPSHOT:processor"
    }
}


// Example for how to get properties into the manifest for reading at runtime.
jar {
    manifest {
        attributes([
                "Specification-Title"     : "create_crystal_clear",
                "Specification-Vendor"    : "create_crystal_clearsareus",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "create_crystal_clearsareus",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs": "create_crystal_clear.mixins.json"
        ])
    }
}

// Example configuration to allow publishing using the maven-publish plugin
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
// publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

mixin {
    add sourceSets.main, 'create_crystal_clear.refmap.json'
}